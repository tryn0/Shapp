import { InjectionToken, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, Input, Output, Directive, HostListener, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PBFPUBKEY_TOKEN = new InjectionToken('Rave.PBFPubKey');
/** @type {?} */
const ENVIRONMENT_TOKEN = new InjectionToken('Rave.IsDevelopment');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.getpaidSetup;
}
/** @type {?} */
const PROD_URL = '//api.ravepay.co/flwv3-pug/getpaidx/api/flwpbf-inline.js';
/** @type {?} */
const DEV_URL = '//ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js';
class AngularRaveService {
    /**
     * @param {?} PBFPubKey
     * @param {?} isDev
     */
    constructor(PBFPubKey, isDev) {
        this.PBFPubKey = PBFPubKey;
        this.isDev = isDev;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    createRaveOptionsObject(obj) {
        /** @type {?} */
        const raveOptions = {};
        raveOptions.amount = obj.amount;
        // raveOptions.hosted_payment = 1; // Modal should open in another page
        raveOptions.PBFPubKey = obj.PBFPubKey || this.PBFPubKey;
        if (obj.payment_method) {
            raveOptions.payment_method = obj.payment_method;
        }
        if (obj.redirect_url) {
            raveOptions.redirect_url = obj.redirect_url;
        }
        if (obj.integrity_hash) {
            raveOptions.integrity_hash = obj.integrity_hash;
        }
        if (obj.pay_button_text) {
            raveOptions.pay_button_text = obj.pay_button_text;
        }
        if (obj.country) {
            raveOptions.country = obj.country;
        }
        if (obj.currency) {
            raveOptions.currency = obj.currency;
        }
        if (obj.custom_description) {
            raveOptions.custom_description = obj.custom_description;
        }
        if (obj.customer_email) {
            raveOptions.customer_email = obj.customer_email;
        }
        if (obj.custom_logo) {
            raveOptions.custom_logo = obj.custom_logo;
        }
        if (obj.custom_title) {
            raveOptions.custom_title = obj.custom_title;
        }
        if (obj.customer_firstname) {
            raveOptions.customer_firstname = obj.customer_firstname;
        }
        if (obj.subaccount) {
            raveOptions.subaccount = obj.subaccount;
        }
        if (obj.customer_lastname) {
            raveOptions.customer_lastname = obj.customer_lastname;
        }
        if (obj.txref) {
            raveOptions.txref = obj.txref;
        }
        if (obj.customer_phone) {
            raveOptions.customer_phone = obj.customer_phone;
        }
        return raveOptions;
    }
    /**
     * @return {?}
     */
    loadScript() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            if (typeof window.getpaidSetup === 'function') {
                resolve();
                return;
            }
            /** @type {?} */
            const script = window.document.createElement('script');
            window.document.head.appendChild(script);
            /** @type {?} */
            const onLoadFunc = (/**
             * @return {?}
             */
            () => {
                script.removeEventListener('load', onLoadFunc);
                resolve();
            });
            script.addEventListener('load', onLoadFunc);
            /** @type {?} */
            const url = this.isDev ? DEV_URL : PROD_URL;
            script.setAttribute('src', url);
        }));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isInvalidOptions(obj) {
        if (!obj.PBFPubKey && !this.PBFPubKey) {
            return 'ANGULAR-RAVE: Merchant public key is required';
        }
        if (!(obj.customer_email || obj.customer_phone)) {
            return 'ANGULAR-RAVE: Customer email or phone number is required';
        }
        if (!obj.txref) {
            return 'ANGULAR-RAVE: A unique transaction reference is required';
        }
        if (!obj.currency) {
            return 'ANGULAR-RAVE: Currency is required, Use "NGN" for naira';
        }
        if (!obj.amount) {
            return 'ANGULAR-RAVE: Amount to charge is required';
        }
        return '';
    }
}
AngularRaveService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
AngularRaveService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PBFPUBKEY_TOKEN,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [ENVIRONMENT_TOKEN,] }] }
];
/** @nocollapse */ AngularRaveService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AngularRaveService_Factory() { return new AngularRaveService(ɵɵinject(PBFPUBKEY_TOKEN), ɵɵinject(ENVIRONMENT_TOKEN)); }, token: AngularRaveService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularRaveService.prototype.PBFPubKey;
    /**
     * @type {?}
     * @private
     */
    AngularRaveService.prototype.isDev;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow$1() { }
if (false) {
    /** @type {?} */
    MyWindow$1.prototype.getpaidSetup;
}
class AngularRaveComponent {
    /**
     * @param {?} raveService
     */
    constructor(raveService) {
        this.raveService = raveService;
        this.onclose = new EventEmitter();
        this.callback = new EventEmitter();
        this.init = new EventEmitter();
        this._raveOptions = {};
    }
    /**
     * @return {?}
     */
    pay() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorExists = false;
            if (this.raveOptions && Object.keys(this.raveOptions).length > 1) {
                errorExists = this.checkInvalidOptions(this.raveOptions);
                this.insertRaveOptions(this.raveOptions);
            }
            else {
                errorExists = this.checkInvalidOptions(this);
                this.insertRaveOptions(this);
            }
            if (errorExists) {
                return;
            }
            yield this.raveService.loadScript();
            this.paymentSetup = window.getpaidSetup(this._raveOptions);
            if (this.init.observers.length > 0) {
                this.init.emit(this.paymentSetup);
            }
        });
    }
    /**
     * @param {?} object
     * @return {?}
     */
    checkInvalidOptions(object) {
        /** @type {?} */
        const optionsInvalid = this.raveService.isInvalidOptions(object);
        if (optionsInvalid) {
            console.error(optionsInvalid);
        }
        return optionsInvalid !== '';
    }
    /**
     * @param {?} object
     * @return {?}
     */
    insertRaveOptions(object) {
        this._raveOptions = this.raveService.createRaveOptionsObject(object);
        if (this.onclose) {
            this._raveOptions.onclose = (/**
             * @return {?}
             */
            () => this.onclose.emit());
        }
        this._raveOptions.callback = (/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.onclose.emit(res);
            if (this.autoClose) {
                this.paymentSetup.close();
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.pay();
    }
}
AngularRaveComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-rave',
                // tslint:disable-line
                template: `<ng-content></ng-content>`
            }] }
];
/** @nocollapse */
AngularRaveComponent.ctorParameters = () => [
    { type: AngularRaveService }
];
AngularRaveComponent.propDecorators = {
    amount: [{ type: Input }],
    autoClose: [{ type: Input }],
    country: [{ type: Input }],
    currency: [{ type: Input }],
    custom_description: [{ type: Input }],
    custom_logo: [{ type: Input }],
    custom_title: [{ type: Input }],
    customer_email: [{ type: Input }],
    customer_firstname: [{ type: Input }],
    customer_lastname: [{ type: Input }],
    customer_phone: [{ type: Input }],
    integrity_hash: [{ type: Input }],
    meta: [{ type: Input }],
    pay_button_text: [{ type: Input }],
    payment_method: [{ type: Input }],
    PBFPubKey: [{ type: Input }],
    raveOptions: [{ type: Input }],
    redirect_url: [{ type: Input }],
    subaccount: [{ type: Input }],
    txref: [{ type: Input }],
    onclose: [{ type: Output }],
    callback: [{ type: Output }],
    init: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AngularRaveComponent.prototype.amount;
    /** @type {?} */
    AngularRaveComponent.prototype.autoClose;
    /** @type {?} */
    AngularRaveComponent.prototype.country;
    /** @type {?} */
    AngularRaveComponent.prototype.currency;
    /** @type {?} */
    AngularRaveComponent.prototype.custom_description;
    /** @type {?} */
    AngularRaveComponent.prototype.custom_logo;
    /** @type {?} */
    AngularRaveComponent.prototype.custom_title;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_email;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_firstname;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_lastname;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_phone;
    /** @type {?} */
    AngularRaveComponent.prototype.integrity_hash;
    /** @type {?} */
    AngularRaveComponent.prototype.meta;
    /** @type {?} */
    AngularRaveComponent.prototype.pay_button_text;
    /** @type {?} */
    AngularRaveComponent.prototype.payment_method;
    /** @type {?} */
    AngularRaveComponent.prototype.PBFPubKey;
    /** @type {?} */
    AngularRaveComponent.prototype.raveOptions;
    /** @type {?} */
    AngularRaveComponent.prototype.redirect_url;
    /** @type {?} */
    AngularRaveComponent.prototype.subaccount;
    /** @type {?} */
    AngularRaveComponent.prototype.txref;
    /** @type {?} */
    AngularRaveComponent.prototype.onclose;
    /** @type {?} */
    AngularRaveComponent.prototype.callback;
    /** @type {?} */
    AngularRaveComponent.prototype.init;
    /**
     * @type {?}
     * @private
     */
    AngularRaveComponent.prototype._raveOptions;
    /**
     * @type {?}
     * @private
     */
    AngularRaveComponent.prototype.paymentSetup;
    /**
     * @type {?}
     * @private
     */
    AngularRaveComponent.prototype.raveService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow$2() { }
if (false) {
    /** @type {?} */
    MyWindow$2.prototype.getpaidSetup;
}
class AngularRaveDirective {
    /**
     * @param {?} raveService
     */
    constructor(raveService) {
        this.raveService = raveService;
        this.raveOptions = {};
        this.onclose = new EventEmitter();
        this.callback = new EventEmitter();
        this.init = new EventEmitter();
        this._raveOptions = {};
    }
    /**
     * @return {?}
     */
    buttonClick() {
        this.pay();
    }
    /**
     * @return {?}
     */
    pay() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorExists = false;
            if (this.raveOptions && Object.keys(this.raveOptions).length > 1) {
                errorExists = this.checkInvalidOptions(this.raveOptions);
                this.insertRaveOptions(this.raveOptions);
            }
            else {
                errorExists = this.checkInvalidOptions(this);
                this.insertRaveOptions(this);
            }
            if (errorExists) {
                return;
            }
            yield this.raveService.loadScript();
            this.paymentSetup = window.getpaidSetup(this._raveOptions);
            if (this.init.observers.length > 0) {
                this.init.emit(this.paymentSetup);
            }
        });
    }
    /**
     * @param {?} object
     * @return {?}
     */
    checkInvalidOptions(object) {
        /** @type {?} */
        const optionsInvalid = this.raveService.isInvalidOptions(object);
        if (optionsInvalid) {
            console.error(optionsInvalid);
        }
        return optionsInvalid !== '';
    }
    /**
     * @param {?} object
     * @return {?}
     */
    insertRaveOptions(object) {
        this._raveOptions = this.raveService.createRaveOptionsObject(object);
        if (this.onclose) {
            this._raveOptions.onclose = (/**
             * @return {?}
             */
            () => this.onclose.emit());
        }
        this._raveOptions.callback = (/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.onclose.emit(res);
            if (this.autoClose) {
                this.paymentSetup.close();
            }
        });
    }
}
AngularRaveDirective.decorators = [
    { type: Directive, args: [{
                selector: '[angular-rave]',
            },] }
];
/** @nocollapse */
AngularRaveDirective.ctorParameters = () => [
    { type: AngularRaveService }
];
AngularRaveDirective.propDecorators = {
    amount: [{ type: Input }],
    autoClose: [{ type: Input }],
    country: [{ type: Input }],
    currency: [{ type: Input }],
    custom_description: [{ type: Input }],
    custom_logo: [{ type: Input }],
    custom_title: [{ type: Input }],
    customer_email: [{ type: Input }],
    customer_firstname: [{ type: Input }],
    customer_lastname: [{ type: Input }],
    customer_phone: [{ type: Input }],
    integrity_hash: [{ type: Input }],
    meta: [{ type: Input }],
    pay_button_text: [{ type: Input }],
    payment_method: [{ type: Input }],
    PBFPubKey: [{ type: Input }],
    raveOptions: [{ type: Input }],
    redirect_url: [{ type: Input }],
    subaccount: [{ type: Input }],
    txref: [{ type: Input }],
    onclose: [{ type: Output }],
    callback: [{ type: Output }],
    init: [{ type: Output }],
    buttonClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    AngularRaveDirective.prototype.amount;
    /** @type {?} */
    AngularRaveDirective.prototype.autoClose;
    /** @type {?} */
    AngularRaveDirective.prototype.country;
    /** @type {?} */
    AngularRaveDirective.prototype.currency;
    /** @type {?} */
    AngularRaveDirective.prototype.custom_description;
    /** @type {?} */
    AngularRaveDirective.prototype.custom_logo;
    /** @type {?} */
    AngularRaveDirective.prototype.custom_title;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_email;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_firstname;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_lastname;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_phone;
    /** @type {?} */
    AngularRaveDirective.prototype.integrity_hash;
    /** @type {?} */
    AngularRaveDirective.prototype.meta;
    /** @type {?} */
    AngularRaveDirective.prototype.pay_button_text;
    /** @type {?} */
    AngularRaveDirective.prototype.payment_method;
    /** @type {?} */
    AngularRaveDirective.prototype.PBFPubKey;
    /** @type {?} */
    AngularRaveDirective.prototype.raveOptions;
    /** @type {?} */
    AngularRaveDirective.prototype.redirect_url;
    /** @type {?} */
    AngularRaveDirective.prototype.subaccount;
    /** @type {?} */
    AngularRaveDirective.prototype.txref;
    /** @type {?} */
    AngularRaveDirective.prototype.onclose;
    /** @type {?} */
    AngularRaveDirective.prototype.callback;
    /** @type {?} */
    AngularRaveDirective.prototype.init;
    /**
     * @type {?}
     * @private
     */
    AngularRaveDirective.prototype._raveOptions;
    /**
     * @type {?}
     * @private
     */
    AngularRaveDirective.prototype.paymentSetup;
    /**
     * @type {?}
     * @private
     */
    AngularRaveDirective.prototype.raveService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularRaveModule {
    /**
     * @param {?} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: AngularRaveModule,
            providers: [
                AngularRaveService,
                { provide: PBFPUBKEY_TOKEN, useValue: options.key },
                { provide: ENVIRONMENT_TOKEN, useValue: options.isTest }
            ]
        };
    }
}
AngularRaveModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [AngularRaveDirective, AngularRaveComponent],
                exports: [AngularRaveDirective, AngularRaveComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularRaveComponent, AngularRaveDirective, AngularRaveModule, AngularRaveService, PBFPUBKEY_TOKEN as ɵa, ENVIRONMENT_TOKEN as ɵb };
//# sourceMappingURL=angular-rave.js.map
