/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function RaveOptions() { }
if (false) {
    /**
     * Your merchant public key provided when you create a button
     * @type {?|undefined}
     */
    RaveOptions.prototype.PBFPubKey;
    /**
     * Email of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_email;
    /**
     * Firstname of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_firstname;
    /**
     * firstname of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_lastname;
    /**
     * Text to be displayed as a short modal description
     * @type {?|undefined}
     */
    RaveOptions.prototype.custom_description;
    /**
     * Link to your custom image
     * @type {?|undefined}
     */
    RaveOptions.prototype.custom_logo;
    /**
     * Text to be displayed as the title of the payment modal
     * @type {?|undefined}
     */
    RaveOptions.prototype.custom_title;
    /**
     * Amount to charge
     * @type {?}
     */
    RaveOptions.prototype.amount;
    /**
     * phone number of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_phone;
    /**
     * URL to redirect to when transaction is completed.
     * @type {?|undefined}
     */
    RaveOptions.prototype.redirect_url;
    /**
     * route country. Default NG
     * @type {?|undefined}
     */
    RaveOptions.prototype.country;
    /**
     * currency to charge the card in. Default "NGN"
     * @type {?}
     */
    RaveOptions.prototype.currency;
    /**
     * This allows you select the payment option you want for your users, possible values are card, account or both
     * @type {?|undefined}
     */
    RaveOptions.prototype.payment_method;
    /**
     * Text to be displayed on the Rave Checkout Button
     * @type {?|undefined}
     */
    RaveOptions.prototype.pay_button_text;
    /**
     * Unique transaction reference provided by the merchant
     * @type {?}
     */
    RaveOptions.prototype.txref;
    /**
     * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway
     * @type {?|undefined}
     */
    RaveOptions.prototype.integrity_hash;
    /**
     * The value to be passed for this is 1. This is useful when customer is using an opera browser, it
     * would load the payment modal on a new page.
     * @type {?|undefined}
     */
    RaveOptions.prototype.hosted_payment;
    /**
     * Any other custom data you wish to pass.
     * @type {?|undefined}
     */
    RaveOptions.prototype.meta;
    /**
     * Subaccounts to split payment with
     * https://developer.flutterwave.com/v2.0/docs/split-payment
     * @type {?|undefined}
     */
    RaveOptions.prototype.subaccount;
}
/**
 * @record
 */
export function PrivateRaveOptions() { }
if (false) {
    /**
     * A function to be called on successful card charge. Userâ€™s can always be redirected to a successful or
     * failed page supplied by the merchant here based on response
     * \@param response?: The server response
     * @type {?}
     */
    PrivateRaveOptions.prototype.callback;
    /**
     * A function to be called when the pay modal is closed.
     * @type {?}
     */
    PrivateRaveOptions.prototype.onclose;
    /**
     * A function to be called when payment is about to begin
     * @type {?}
     */
    PrivateRaveOptions.prototype.init;
}
export class PaymentSetup {
}
if (false) {
    /** @type {?} */
    PaymentSetup.prototype.close;
}
/**
 * @record
 */
export function RaveRootOptions() { }
if (false) {
    /**
     * Your rave public key. You should use your test key for test mode and live key for live mode.
     * @type {?|undefined}
     */
    RaveRootOptions.prototype.key;
    /**
     * Used to determing what script to load. Set to false when using a test public key.
     * Default: `false`
     * @type {?|undefined}
     */
    RaveRootOptions.prototype.isTest;
}
/**
 * @record
 */
export function PaymentInstance() { }
if (false) {
    /**
     * Close the payment modal after payment has finished
     * @type {?}
     */
    PaymentInstance.prototype.close;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF2ZS1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1yYXZlLyIsInNvdXJjZXMiOlsibGliL3JhdmUtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsaUNBK0VDOzs7Ozs7SUEzRUMsZ0NBQW1COzs7OztJQUluQixxQ0FBd0I7Ozs7O0lBSXhCLHlDQUE0Qjs7Ozs7SUFJNUIsd0NBQTJCOzs7OztJQUkzQix5Q0FBNEI7Ozs7O0lBSTVCLGtDQUFxQjs7Ozs7SUFJckIsbUNBQXNCOzs7OztJQUl0Qiw2QkFBZTs7Ozs7SUFJZixxQ0FBd0I7Ozs7O0lBSXhCLG1DQUFzQjs7Ozs7SUFJdEIsOEJBQWlCOzs7OztJQUlqQiwrQkFBaUI7Ozs7O0lBSWpCLHFDQUF3Qjs7Ozs7SUFJeEIsc0NBQXlCOzs7OztJQUl6Qiw0QkFBYzs7Ozs7SUFJZCxxQ0FBd0I7Ozs7OztJQUt4QixxQ0FBbUI7Ozs7O0lBSW5CLDJCQUFXOzs7Ozs7SUFLWCxpQ0FBK0Q7Ozs7O0FBR2pFLHdDQWVDOzs7Ozs7OztJQVRDLHNDQUFtQzs7Ozs7SUFJbkMscUNBQW9COzs7OztJQUlwQixrQ0FBaUI7O0FBR25CLE1BQU0sT0FBTyxZQUFZO0NBRXhCOzs7SUFEQyw2QkFBa0I7Ozs7O0FBR3BCLHFDQVVDOzs7Ozs7SUFOQyw4QkFBYzs7Ozs7O0lBS2QsaUNBQWtCOzs7OztBQUlwQixxQ0FLQzs7Ozs7O0lBREMsZ0NBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBSYXZlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBZb3VyIG1lcmNoYW50IHB1YmxpYyBrZXkgcHJvdmlkZWQgd2hlbiB5b3UgY3JlYXRlIGEgYnV0dG9uXG4gICAqL1xuICBQQkZQdWJLZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFbWFpbCBvZiB0aGUgY3VzdG9tZXJcbiAgICovXG4gIGN1c3RvbWVyX2VtYWlsPzogc3RyaW5nO1xuICAvKipcbiAgICogRmlyc3RuYW1lIG9mIHRoZSBjdXN0b21lclxuICAgKi9cbiAgY3VzdG9tZXJfZmlyc3RuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogZmlyc3RuYW1lIG9mIHRoZSBjdXN0b21lclxuICAgKi9cbiAgY3VzdG9tZXJfbGFzdG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUZXh0IHRvIGJlIGRpc3BsYXllZCBhcyBhIHNob3J0IG1vZGFsIGRlc2NyaXB0aW9uXG4gICAqL1xuICBjdXN0b21fZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBMaW5rIHRvIHlvdXIgY3VzdG9tIGltYWdlXG4gICAqL1xuICBjdXN0b21fbG9nbz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRleHQgdG8gYmUgZGlzcGxheWVkIGFzIHRoZSB0aXRsZSBvZiB0aGUgcGF5bWVudCBtb2RhbFxuICAgKi9cbiAgY3VzdG9tX3RpdGxlPzogc3RyaW5nO1xuICAvKipcbiAgICogQW1vdW50IHRvIGNoYXJnZVxuICAgKi9cbiAgYW1vdW50OiBudW1iZXI7XG4gIC8qKlxuICAgKiBwaG9uZSBudW1iZXIgb2YgdGhlIGN1c3RvbWVyXG4gICAqL1xuICBjdXN0b21lcl9waG9uZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFVSTCB0byByZWRpcmVjdCB0byB3aGVuIHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlZC5cbiAgICovXG4gIHJlZGlyZWN0X3VybD86IHN0cmluZztcbiAgLyoqXG4gICAqIHJvdXRlIGNvdW50cnkuIERlZmF1bHQgTkdcbiAgICovXG4gIGNvdW50cnk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBjdXJyZW5jeSB0byBjaGFyZ2UgdGhlIGNhcmQgaW4uIERlZmF1bHQgXCJOR05cIlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoaXMgYWxsb3dzIHlvdSBzZWxlY3QgdGhlIHBheW1lbnQgb3B0aW9uIHlvdSB3YW50IGZvciB5b3VyIHVzZXJzLCBwb3NzaWJsZSB2YWx1ZXMgYXJlIGNhcmQsIGFjY291bnQgb3IgYm90aFxuICAgKi9cbiAgcGF5bWVudF9tZXRob2Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUZXh0IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgUmF2ZSBDaGVja291dCBCdXR0b25cbiAgICovXG4gIHBheV9idXR0b25fdGV4dD86IHN0cmluZztcbiAgLyoqXG4gICAqIFVuaXF1ZSB0cmFuc2FjdGlvbiByZWZlcmVuY2UgcHJvdmlkZWQgYnkgdGhlIG1lcmNoYW50XG4gICAqL1xuICB0eHJlZjogc3RyaW5nO1xuICAvKipcbiAgICogVGhpcyBpcyBhIHNoYTI1NiBoYXNoIG9mIHlvdXIgZ2V0cGFpZFNldHVwIHZhbHVlcywgaXQgaXMgdXNlZCBmb3IgcGFzc2luZyBzZWN1cmVkIHZhbHVlcyB0byB0aGUgcGF5bWVudCBnYXRld2F5XG4gICAqL1xuICBpbnRlZ3JpdHlfaGFzaD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSB0byBiZSBwYXNzZWQgZm9yIHRoaXMgaXMgMS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBjdXN0b21lciBpcyB1c2luZyBhbiBvcGVyYSBicm93c2VyLCBpdFxuICAgKiB3b3VsZCBsb2FkIHRoZSBwYXltZW50IG1vZGFsIG9uIGEgbmV3IHBhZ2UuXG4gICAqL1xuICBob3N0ZWRfcGF5bWVudD86IDE7XG4gIC8qKlxuICAgKiBBbnkgb3RoZXIgY3VzdG9tIGRhdGEgeW91IHdpc2ggdG8gcGFzcy5cbiAgICovXG4gIG1ldGE/OiBhbnk7XG4gIC8qKlxuICAgKiBTdWJhY2NvdW50cyB0byBzcGxpdCBwYXltZW50IHdpdGhcbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIuZmx1dHRlcndhdmUuY29tL3YyLjAvZG9jcy9zcGxpdC1wYXltZW50XG4gICAqL1xuICBzdWJhY2NvdW50PzogeyBpZDogc3RyaW5nLCB0cmFuc2FjdGlvbl9zcGxpdF9yYXRpbzogc3RyaW5nIH1bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcml2YXRlUmF2ZU9wdGlvbnMgZXh0ZW5kcyBSYXZlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBzdWNjZXNzZnVsIGNhcmQgY2hhcmdlLiBVc2Vy4oCZcyBjYW4gYWx3YXlzIGJlIHJlZGlyZWN0ZWQgdG8gYSBzdWNjZXNzZnVsIG9yXG4gICAqIGZhaWxlZCBwYWdlIHN1cHBsaWVkIGJ5IHRoZSBtZXJjaGFudCBoZXJlIGJhc2VkIG9uIHJlc3BvbnNlXG4gICAqIEBwYXJhbSByZXNwb25zZT86IFRoZSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICovXG4gIGNhbGxiYWNrOiAocmVzcG9uc2U/OiBhbnkpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBwYXkgbW9kYWwgaXMgY2xvc2VkLlxuICAgKi9cbiAgb25jbG9zZTogKCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gcGF5bWVudCBpcyBhYm91dCB0byBiZWdpblxuICAgKi9cbiAgaW5pdDogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFBheW1lbnRTZXR1cCB7XG4gIGNsb3NlOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhdmVSb290T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBZb3VyIHJhdmUgcHVibGljIGtleS4gWW91IHNob3VsZCB1c2UgeW91ciB0ZXN0IGtleSBmb3IgdGVzdCBtb2RlIGFuZCBsaXZlIGtleSBmb3IgbGl2ZSBtb2RlLlxuICAgKi9cbiAga2V5ID86IHN0cmluZztcbiAgLyoqXG4gICAqIFVzZWQgdG8gZGV0ZXJtaW5nIHdoYXQgc2NyaXB0IHRvIGxvYWQuIFNldCB0byBmYWxzZSB3aGVuIHVzaW5nIGEgdGVzdCBwdWJsaWMga2V5LlxuICAgKiBEZWZhdWx0OiBgZmFsc2VgXG4gICAqL1xuICBpc1Rlc3QgPzogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRJbnN0YW5jZSB7XG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgcGF5bWVudCBtb2RhbCBhZnRlciBwYXltZW50IGhhcyBmaW5pc2hlZFxuICAgKi9cbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG59XG4iXX0=