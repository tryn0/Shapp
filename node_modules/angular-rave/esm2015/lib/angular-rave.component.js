/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { AngularRaveService } from './angular-rave.service';
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.getpaidSetup;
}
export class AngularRaveComponent {
    /**
     * @param {?} raveService
     */
    constructor(raveService) {
        this.raveService = raveService;
        this.onclose = new EventEmitter();
        this.callback = new EventEmitter();
        this.init = new EventEmitter();
        this._raveOptions = {};
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorExists = false;
            if (this.raveOptions && Object.keys(this.raveOptions).length > 1) {
                errorExists = this.checkInvalidOptions(this.raveOptions);
                this.insertRaveOptions(this.raveOptions);
            }
            else {
                errorExists = this.checkInvalidOptions(this);
                this.insertRaveOptions(this);
            }
            if (errorExists) {
                return;
            }
            yield this.raveService.loadScript();
            this.paymentSetup = window.getpaidSetup(this._raveOptions);
            if (this.init.observers.length > 0) {
                this.init.emit(this.paymentSetup);
            }
        });
    }
    /**
     * @param {?} object
     * @return {?}
     */
    checkInvalidOptions(object) {
        /** @type {?} */
        const optionsInvalid = this.raveService.isInvalidOptions(object);
        if (optionsInvalid) {
            console.error(optionsInvalid);
        }
        return optionsInvalid !== '';
    }
    /**
     * @param {?} object
     * @return {?}
     */
    insertRaveOptions(object) {
        this._raveOptions = this.raveService.createRaveOptionsObject(object);
        if (this.onclose) {
            this._raveOptions.onclose = (/**
             * @return {?}
             */
            () => this.onclose.emit());
        }
        this._raveOptions.callback = (/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.onclose.emit(res);
            if (this.autoClose) {
                this.paymentSetup.close();
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.pay();
    }
}
AngularRaveComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-rave',
                // tslint:disable-line
                template: `<ng-content></ng-content>`
            }] }
];
/** @nocollapse */
AngularRaveComponent.ctorParameters = () => [
    { type: AngularRaveService }
];
AngularRaveComponent.propDecorators = {
    amount: [{ type: Input }],
    autoClose: [{ type: Input }],
    country: [{ type: Input }],
    currency: [{ type: Input }],
    custom_description: [{ type: Input }],
    custom_logo: [{ type: Input }],
    custom_title: [{ type: Input }],
    customer_email: [{ type: Input }],
    customer_firstname: [{ type: Input }],
    customer_lastname: [{ type: Input }],
    customer_phone: [{ type: Input }],
    integrity_hash: [{ type: Input }],
    meta: [{ type: Input }],
    pay_button_text: [{ type: Input }],
    payment_method: [{ type: Input }],
    PBFPubKey: [{ type: Input }],
    raveOptions: [{ type: Input }],
    redirect_url: [{ type: Input }],
    subaccount: [{ type: Input }],
    txref: [{ type: Input }],
    onclose: [{ type: Output }],
    callback: [{ type: Output }],
    init: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AngularRaveComponent.prototype.amount;
    /** @type {?} */
    AngularRaveComponent.prototype.autoClose;
    /** @type {?} */
    AngularRaveComponent.prototype.country;
    /** @type {?} */
    AngularRaveComponent.prototype.currency;
    /** @type {?} */
    AngularRaveComponent.prototype.custom_description;
    /** @type {?} */
    AngularRaveComponent.prototype.custom_logo;
    /** @type {?} */
    AngularRaveComponent.prototype.custom_title;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_email;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_firstname;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_lastname;
    /** @type {?} */
    AngularRaveComponent.prototype.customer_phone;
    /** @type {?} */
    AngularRaveComponent.prototype.integrity_hash;
    /** @type {?} */
    AngularRaveComponent.prototype.meta;
    /** @type {?} */
    AngularRaveComponent.prototype.pay_button_text;
    /** @type {?} */
    AngularRaveComponent.prototype.payment_method;
    /** @type {?} */
    AngularRaveComponent.prototype.PBFPubKey;
    /** @type {?} */
    AngularRaveComponent.prototype.raveOptions;
    /** @type {?} */
    AngularRaveComponent.prototype.redirect_url;
    /** @type {?} */
    AngularRaveComponent.prototype.subaccount;
    /** @type {?} */
    AngularRaveComponent.prototype.txref;
    /** @type {?} */
    AngularRaveComponent.prototype.onclose;
    /** @type {?} */
    AngularRaveComponent.prototype.callback;
    /** @type {?} */
    AngularRaveComponent.prototype.init;
    /**
     * @type {?}
     * @private
     */
    AngularRaveComponent.prototype._raveOptions;
    /**
     * @type {?}
     * @private
     */
    AngularRaveComponent.prototype.paymentSetup;
    /**
     * @type {?}
     * @private
     */
    AngularRaveComponent.prototype.raveService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1yYXZlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcmF2ZS8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLXJhdmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQUU1RCx1QkFFQzs7O0lBREMsZ0NBQXlFOztBQVUzRSxNQUFNLE9BQU8sb0JBQW9COzs7O0lBMkIvQixZQUFvQixXQUErQjtRQUEvQixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFOekMsWUFBTyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ3ZELGFBQVEsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUM1RCxTQUFJLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFDMUQsaUJBQVksR0FBZ0MsRUFBRSxDQUFDO0lBR0EsQ0FBQzs7OztJQUVsRCxHQUFHOzs7Z0JBQ0gsV0FBVyxHQUFHLEtBQUs7WUFDdkIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ2hFLFdBQVcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzFDO2lCQUFNO2dCQUNMLFdBQVcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QjtZQUNELElBQUksV0FBVyxFQUFFO2dCQUFFLE9BQU87YUFBRTtZQUM1QixNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMzRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuQztRQUNILENBQUM7S0FBQTs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxNQUE0Qjs7Y0FDeEMsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO1FBQ2hFLElBQUksY0FBYyxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDL0I7UUFDRCxPQUFPLGNBQWMsS0FBSyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxNQUE0QjtRQUM1QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPOzs7WUFBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBLENBQUM7U0FBRTtRQUM1RSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQSxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDYixDQUFDOzs7WUF4RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjOztnQkFDeEIsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7OztZQVhRLGtCQUFrQjs7O3FCQWN4QixLQUFLO3dCQUNMLEtBQUs7c0JBQ0wsS0FBSzt1QkFDTCxLQUFLO2lDQUNMLEtBQUs7MEJBQ0wsS0FBSzsyQkFDTCxLQUFLOzZCQUNMLEtBQUs7aUNBQ0wsS0FBSztnQ0FDTCxLQUFLOzZCQUNMLEtBQUs7NkJBQ0wsS0FBSzttQkFDTCxLQUFLOzhCQUNMLEtBQUs7NkJBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7MkJBQ0wsS0FBSzt5QkFDTCxLQUFLO29CQUNMLEtBQUs7c0JBQ0wsTUFBTTt1QkFDTixNQUFNO21CQUNOLE1BQU07Ozs7SUF0QlAsc0NBQXdCOztJQUN4Qix5Q0FBNEI7O0lBQzVCLHVDQUF5Qjs7SUFDekIsd0NBQTBCOztJQUMxQixrREFBb0M7O0lBQ3BDLDJDQUE2Qjs7SUFDN0IsNENBQThCOztJQUM5Qiw4Q0FBZ0M7O0lBQ2hDLGtEQUFvQzs7SUFDcEMsaURBQW1DOztJQUNuQyw4Q0FBZ0M7O0lBQ2hDLDhDQUFnQzs7SUFDaEMsb0NBQW1COztJQUNuQiwrQ0FBaUM7O0lBQ2pDLDhDQUFnQzs7SUFDaEMseUNBQTJCOztJQUMzQiwyQ0FBa0Q7O0lBQ2xELDRDQUE4Qjs7SUFDOUIsMENBQXVFOztJQUN2RSxxQ0FBdUI7O0lBQ3ZCLHVDQUFpRTs7SUFDakUsd0NBQXNFOztJQUN0RSxvQ0FBa0U7Ozs7O0lBQ2xFLDRDQUF1RDs7Ozs7SUFDdkQsNENBQW1DOzs7OztJQUV2QiwyQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcml2YXRlUmF2ZU9wdGlvbnMsIFBheW1lbnRTZXR1cCwgUmF2ZU9wdGlvbnMgfSBmcm9tICcuL3JhdmUtb3B0aW9ucyc7XG5pbXBvcnQgeyBBbmd1bGFyUmF2ZVNlcnZpY2UgfSBmcm9tICcuL2FuZ3VsYXItcmF2ZS5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgZ2V0cGFpZFNldHVwOiAocmF2ZU9wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVJhdmVPcHRpb25zPikgPT4gUGF5bWVudFNldHVwO1xufVxuXG5kZWNsYXJlIHZhciB3aW5kb3c6IE15V2luZG93O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbmd1bGFyLXJhdmUnLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcbn0pXG5cbmV4cG9ydCBjbGFzcyBBbmd1bGFyUmF2ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGFtb3VudDogbnVtYmVyO1xuICBASW5wdXQoKSBhdXRvQ2xvc2U6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNvdW50cnk6IHN0cmluZztcbiAgQElucHV0KCkgY3VycmVuY3k6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbV9sb2dvOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbV90aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBjdXN0b21lcl9lbWFpbDogc3RyaW5nO1xuICBASW5wdXQoKSBjdXN0b21lcl9maXJzdG5hbWU6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tZXJfbGFzdG5hbWU6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tZXJfcGhvbmU6IHN0cmluZztcbiAgQElucHV0KCkgaW50ZWdyaXR5X2hhc2g6IHN0cmluZztcbiAgQElucHV0KCkgbWV0YTogYW55O1xuICBASW5wdXQoKSBwYXlfYnV0dG9uX3RleHQ6IHN0cmluZztcbiAgQElucHV0KCkgcGF5bWVudF9tZXRob2Q6IHN0cmluZztcbiAgQElucHV0KCkgUEJGUHViS2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHJhdmVPcHRpb25zOiBQYXJ0aWFsPFByaXZhdGVSYXZlT3B0aW9ucz47XG4gIEBJbnB1dCgpIHJlZGlyZWN0X3VybDogc3RyaW5nO1xuICBASW5wdXQoKSBzdWJhY2NvdW50OiB7IGlkOiBzdHJpbmcsIHRyYW5zYWN0aW9uX3NwbGl0X3JhdGlvOiBzdHJpbmcgfVtdO1xuICBASW5wdXQoKSB0eHJlZjogc3RyaW5nO1xuICBAT3V0cHV0KCkgb25jbG9zZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgY2FsbGJhY2s6IEV2ZW50RW1pdHRlcjxvYmplY3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gIEBPdXRwdXQoKSBpbml0OiBFdmVudEVtaXR0ZXI8b2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICBwcml2YXRlIF9yYXZlT3B0aW9uczogUGFydGlhbDxQcml2YXRlUmF2ZU9wdGlvbnM+ID0ge307XG4gIHByaXZhdGUgcGF5bWVudFNldHVwOiBQYXltZW50U2V0dXA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByYXZlU2VydmljZTogQW5ndWxhclJhdmVTZXJ2aWNlKSB7IH1cblxuICBhc3luYyBwYXkoKSB7XG4gICAgbGV0IGVycm9yRXhpc3RzID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucmF2ZU9wdGlvbnMgJiYgT2JqZWN0LmtleXModGhpcy5yYXZlT3B0aW9ucykubGVuZ3RoID4gMSkge1xuICAgICAgZXJyb3JFeGlzdHMgPSB0aGlzLmNoZWNrSW52YWxpZE9wdGlvbnModGhpcy5yYXZlT3B0aW9ucyk7XG4gICAgICB0aGlzLmluc2VydFJhdmVPcHRpb25zKHRoaXMucmF2ZU9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvckV4aXN0cyA9IHRoaXMuY2hlY2tJbnZhbGlkT3B0aW9ucyh0aGlzKTtcbiAgICAgIHRoaXMuaW5zZXJ0UmF2ZU9wdGlvbnModGhpcyk7XG4gICAgfVxuICAgIGlmIChlcnJvckV4aXN0cykgeyByZXR1cm47IH1cbiAgICBhd2FpdCB0aGlzLnJhdmVTZXJ2aWNlLmxvYWRTY3JpcHQoKTtcbiAgICB0aGlzLnBheW1lbnRTZXR1cCA9IHdpbmRvdy5nZXRwYWlkU2V0dXAodGhpcy5fcmF2ZU9wdGlvbnMpO1xuICAgIGlmICh0aGlzLmluaXQub2JzZXJ2ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuaW5pdC5lbWl0KHRoaXMucGF5bWVudFNldHVwKTtcbiAgICB9XG4gIH1cblxuICBjaGVja0ludmFsaWRPcHRpb25zKG9iamVjdDogUGFydGlhbDxSYXZlT3B0aW9ucz4pOiBib29sZWFuIHtcbiAgICBjb25zdCBvcHRpb25zSW52YWxpZCA9IHRoaXMucmF2ZVNlcnZpY2UuaXNJbnZhbGlkT3B0aW9ucyhvYmplY3QpO1xuICAgIGlmIChvcHRpb25zSW52YWxpZCkge1xuICAgICAgY29uc29sZS5lcnJvcihvcHRpb25zSW52YWxpZCk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zSW52YWxpZCAhPT0gJyc7XG4gIH1cblxuICBpbnNlcnRSYXZlT3B0aW9ucyhvYmplY3Q6IFBhcnRpYWw8UmF2ZU9wdGlvbnM+KSB7XG4gICAgdGhpcy5fcmF2ZU9wdGlvbnMgPSB0aGlzLnJhdmVTZXJ2aWNlLmNyZWF0ZVJhdmVPcHRpb25zT2JqZWN0KG9iamVjdCk7XG4gICAgaWYgKHRoaXMub25jbG9zZSkgeyB0aGlzLl9yYXZlT3B0aW9ucy5vbmNsb3NlID0gKCkgPT4gdGhpcy5vbmNsb3NlLmVtaXQoKTsgfVxuICAgIHRoaXMuX3JhdmVPcHRpb25zLmNhbGxiYWNrID0gKHJlcykgPT4ge1xuICAgICAgdGhpcy5vbmNsb3NlLmVtaXQocmVzKTtcbiAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICB0aGlzLnBheW1lbnRTZXR1cC5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnBheSgpO1xuICB9XG59XG4iXX0=