/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, HostListener, EventEmitter } from '@angular/core';
import { AngularRaveService } from './angular-rave.service';
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.getpaidSetup;
}
export class AngularRaveDirective {
    /**
     * @param {?} raveService
     */
    constructor(raveService) {
        this.raveService = raveService;
        this.raveOptions = {};
        this.onclose = new EventEmitter();
        this.callback = new EventEmitter();
        this.init = new EventEmitter();
        this._raveOptions = {};
    }
    /**
     * @return {?}
     */
    buttonClick() {
        this.pay();
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorExists = false;
            if (this.raveOptions && Object.keys(this.raveOptions).length > 1) {
                errorExists = this.checkInvalidOptions(this.raveOptions);
                this.insertRaveOptions(this.raveOptions);
            }
            else {
                errorExists = this.checkInvalidOptions(this);
                this.insertRaveOptions(this);
            }
            if (errorExists) {
                return;
            }
            yield this.raveService.loadScript();
            this.paymentSetup = window.getpaidSetup(this._raveOptions);
            if (this.init.observers.length > 0) {
                this.init.emit(this.paymentSetup);
            }
        });
    }
    /**
     * @param {?} object
     * @return {?}
     */
    checkInvalidOptions(object) {
        /** @type {?} */
        const optionsInvalid = this.raveService.isInvalidOptions(object);
        if (optionsInvalid) {
            console.error(optionsInvalid);
        }
        return optionsInvalid !== '';
    }
    /**
     * @param {?} object
     * @return {?}
     */
    insertRaveOptions(object) {
        this._raveOptions = this.raveService.createRaveOptionsObject(object);
        if (this.onclose) {
            this._raveOptions.onclose = (/**
             * @return {?}
             */
            () => this.onclose.emit());
        }
        this._raveOptions.callback = (/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.onclose.emit(res);
            if (this.autoClose) {
                this.paymentSetup.close();
            }
        });
    }
}
AngularRaveDirective.decorators = [
    { type: Directive, args: [{
                selector: '[angular-rave]',
            },] }
];
/** @nocollapse */
AngularRaveDirective.ctorParameters = () => [
    { type: AngularRaveService }
];
AngularRaveDirective.propDecorators = {
    amount: [{ type: Input }],
    autoClose: [{ type: Input }],
    country: [{ type: Input }],
    currency: [{ type: Input }],
    custom_description: [{ type: Input }],
    custom_logo: [{ type: Input }],
    custom_title: [{ type: Input }],
    customer_email: [{ type: Input }],
    customer_firstname: [{ type: Input }],
    customer_lastname: [{ type: Input }],
    customer_phone: [{ type: Input }],
    integrity_hash: [{ type: Input }],
    meta: [{ type: Input }],
    pay_button_text: [{ type: Input }],
    payment_method: [{ type: Input }],
    PBFPubKey: [{ type: Input }],
    raveOptions: [{ type: Input }],
    redirect_url: [{ type: Input }],
    subaccount: [{ type: Input }],
    txref: [{ type: Input }],
    onclose: [{ type: Output }],
    callback: [{ type: Output }],
    init: [{ type: Output }],
    buttonClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    AngularRaveDirective.prototype.amount;
    /** @type {?} */
    AngularRaveDirective.prototype.autoClose;
    /** @type {?} */
    AngularRaveDirective.prototype.country;
    /** @type {?} */
    AngularRaveDirective.prototype.currency;
    /** @type {?} */
    AngularRaveDirective.prototype.custom_description;
    /** @type {?} */
    AngularRaveDirective.prototype.custom_logo;
    /** @type {?} */
    AngularRaveDirective.prototype.custom_title;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_email;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_firstname;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_lastname;
    /** @type {?} */
    AngularRaveDirective.prototype.customer_phone;
    /** @type {?} */
    AngularRaveDirective.prototype.integrity_hash;
    /** @type {?} */
    AngularRaveDirective.prototype.meta;
    /** @type {?} */
    AngularRaveDirective.prototype.pay_button_text;
    /** @type {?} */
    AngularRaveDirective.prototype.payment_method;
    /** @type {?} */
    AngularRaveDirective.prototype.PBFPubKey;
    /** @type {?} */
    AngularRaveDirective.prototype.raveOptions;
    /** @type {?} */
    AngularRaveDirective.prototype.redirect_url;
    /** @type {?} */
    AngularRaveDirective.prototype.subaccount;
    /** @type {?} */
    AngularRaveDirective.prototype.txref;
    /** @type {?} */
    AngularRaveDirective.prototype.onclose;
    /** @type {?} */
    AngularRaveDirective.prototype.callback;
    /** @type {?} */
    AngularRaveDirective.prototype.init;
    /**
     * @type {?}
     * @private
     */
    AngularRaveDirective.prototype._raveOptions;
    /**
     * @type {?}
     * @private
     */
    AngularRaveDirective.prototype.paymentSetup;
    /**
     * @type {?}
     * @private
     */
    AngularRaveDirective.prototype.raveService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1yYXZlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcmF2ZS8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLXJhdmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7QUFFNUQsdUJBRUM7OztJQURDLGdDQUF5RTs7QUFRM0UsTUFBTSxPQUFPLG9CQUFvQjs7OztJQTJCL0IsWUFBb0IsV0FBK0I7UUFBL0IsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBVjFDLGdCQUFXLEdBQWdDLEVBQUUsQ0FBQztRQUk3QyxZQUFPLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFDdkQsYUFBUSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3RELFNBQUksR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUMxRCxpQkFBWSxHQUFnQyxFQUFFLENBQUM7SUFHQSxDQUFDOzs7O0lBR3hELFdBQVc7UUFDVCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDYixDQUFDOzs7O0lBRUssR0FBRzs7O2dCQUNILFdBQVcsR0FBRyxLQUFLO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNoRSxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDekQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUMxQztpQkFBTTtnQkFDTCxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDOUI7WUFDRCxJQUFJLFdBQVcsRUFBRTtnQkFBRSxPQUFPO2FBQUU7WUFDNUIsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDbkM7UUFDSCxDQUFDO0tBQUE7Ozs7O0lBRUQsbUJBQW1CLENBQUMsTUFBNEI7O2NBQ3hDLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztRQUNoRSxJQUFJLGNBQWMsRUFBRTtZQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxjQUFjLEtBQUssRUFBRSxDQUFDO0lBQy9CLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsTUFBNEI7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTzs7O1lBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDO1NBQUU7UUFDNUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFROzs7O1FBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDM0I7UUFDSCxDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7OztZQXZFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7OztZQVZRLGtCQUFrQjs7O3FCQVl4QixLQUFLO3dCQUNMLEtBQUs7c0JBQ0wsS0FBSzt1QkFDTCxLQUFLO2lDQUNMLEtBQUs7MEJBQ0wsS0FBSzsyQkFDTCxLQUFLOzZCQUNMLEtBQUs7aUNBQ0wsS0FBSztnQ0FDTCxLQUFLOzZCQUNMLEtBQUs7NkJBQ0wsS0FBSzttQkFDTCxLQUFLOzhCQUNMLEtBQUs7NkJBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7MkJBQ0wsS0FBSzt5QkFDTCxLQUFLO29CQUNMLEtBQUs7c0JBQ0wsTUFBTTt1QkFDTixNQUFNO21CQUNOLE1BQU07MEJBTU4sWUFBWSxTQUFDLE9BQU87Ozs7SUE1QnJCLHNDQUF3Qjs7SUFDeEIseUNBQTRCOztJQUM1Qix1Q0FBeUI7O0lBQ3pCLHdDQUEwQjs7SUFDMUIsa0RBQW9DOztJQUNwQywyQ0FBNkI7O0lBQzdCLDRDQUE4Qjs7SUFDOUIsOENBQWdDOztJQUNoQyxrREFBb0M7O0lBQ3BDLGlEQUFtQzs7SUFDbkMsOENBQWdDOztJQUNoQyw4Q0FBZ0M7O0lBQ2hDLG9DQUFtQjs7SUFDbkIsK0NBQWlDOztJQUNqQyw4Q0FBZ0M7O0lBQ2hDLHlDQUEyQjs7SUFDM0IsMkNBQXVEOztJQUN2RCw0Q0FBOEI7O0lBQzlCLDBDQUF1RTs7SUFDdkUscUNBQXVCOztJQUN2Qix1Q0FBaUU7O0lBQ2pFLHdDQUFnRTs7SUFDaEUsb0NBQWtFOzs7OztJQUNsRSw0Q0FBdUQ7Ozs7O0lBQ3ZELDRDQUFtQzs7Ozs7SUFFdkIsMkNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBIb3N0TGlzdGVuZXIsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQcml2YXRlUmF2ZU9wdGlvbnMsIFBheW1lbnRTZXR1cCwgUmF2ZU9wdGlvbnMgfSBmcm9tICcuL3JhdmUtb3B0aW9ucyc7XG5pbXBvcnQgeyBBbmd1bGFyUmF2ZVNlcnZpY2UgfSBmcm9tICcuL2FuZ3VsYXItcmF2ZS5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgZ2V0cGFpZFNldHVwOiAocmF2ZU9wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVJhdmVPcHRpb25zPikgPT4gUGF5bWVudFNldHVwO1xufVxuXG5kZWNsYXJlIHZhciB3aW5kb3c6IE15V2luZG93O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYW5ndWxhci1yYXZlXScsIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhclJhdmVEaXJlY3RpdmUge1xuICBASW5wdXQoKSBhbW91bnQ6IG51bWJlcjtcbiAgQElucHV0KCkgYXV0b0Nsb3NlOiBib29sZWFuO1xuICBASW5wdXQoKSBjb3VudHJ5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1cnJlbmN5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbV9kZXNjcmlwdGlvbjogc3RyaW5nO1xuICBASW5wdXQoKSBjdXN0b21fbG9nbzogc3RyaW5nO1xuICBASW5wdXQoKSBjdXN0b21fdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tZXJfZW1haWw6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tZXJfZmlyc3RuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbWVyX2xhc3RuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbWVyX3Bob25lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGludGVncml0eV9oYXNoOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1ldGE6IGFueTtcbiAgQElucHV0KCkgcGF5X2J1dHRvbl90ZXh0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBheW1lbnRfbWV0aG9kOiBzdHJpbmc7XG4gIEBJbnB1dCgpIFBCRlB1YktleTogc3RyaW5nO1xuICBASW5wdXQoKSByYXZlT3B0aW9uczogUGFydGlhbDxQcml2YXRlUmF2ZU9wdGlvbnM+ID0ge307XG4gIEBJbnB1dCgpIHJlZGlyZWN0X3VybDogc3RyaW5nO1xuICBASW5wdXQoKSBzdWJhY2NvdW50OiB7IGlkOiBzdHJpbmcsIHRyYW5zYWN0aW9uX3NwbGl0X3JhdGlvOiBzdHJpbmcgfVtdO1xuICBASW5wdXQoKSB0eHJlZjogc3RyaW5nO1xuICBAT3V0cHV0KCkgb25jbG9zZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgY2FsbGJhY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBpbml0OiBFdmVudEVtaXR0ZXI8b2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICBwcml2YXRlIF9yYXZlT3B0aW9uczogUGFydGlhbDxQcml2YXRlUmF2ZU9wdGlvbnM+ID0ge307XG4gIHByaXZhdGUgcGF5bWVudFNldHVwOiBQYXltZW50U2V0dXA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByYXZlU2VydmljZTogQW5ndWxhclJhdmVTZXJ2aWNlKSB7IH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIGJ1dHRvbkNsaWNrKCkge1xuICAgIHRoaXMucGF5KCk7XG4gIH1cblxuICBhc3luYyBwYXkoKSB7XG4gICAgbGV0IGVycm9yRXhpc3RzID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucmF2ZU9wdGlvbnMgJiYgT2JqZWN0LmtleXModGhpcy5yYXZlT3B0aW9ucykubGVuZ3RoID4gMSkge1xuICAgICAgZXJyb3JFeGlzdHMgPSB0aGlzLmNoZWNrSW52YWxpZE9wdGlvbnModGhpcy5yYXZlT3B0aW9ucyk7XG4gICAgICB0aGlzLmluc2VydFJhdmVPcHRpb25zKHRoaXMucmF2ZU9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvckV4aXN0cyA9IHRoaXMuY2hlY2tJbnZhbGlkT3B0aW9ucyh0aGlzKTtcbiAgICAgIHRoaXMuaW5zZXJ0UmF2ZU9wdGlvbnModGhpcyk7XG4gICAgfVxuICAgIGlmIChlcnJvckV4aXN0cykgeyByZXR1cm47IH1cbiAgICBhd2FpdCB0aGlzLnJhdmVTZXJ2aWNlLmxvYWRTY3JpcHQoKTtcbiAgICB0aGlzLnBheW1lbnRTZXR1cCA9IHdpbmRvdy5nZXRwYWlkU2V0dXAodGhpcy5fcmF2ZU9wdGlvbnMpO1xuICAgIGlmICh0aGlzLmluaXQub2JzZXJ2ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuaW5pdC5lbWl0KHRoaXMucGF5bWVudFNldHVwKTtcbiAgICB9XG4gIH1cblxuICBjaGVja0ludmFsaWRPcHRpb25zKG9iamVjdDogUGFydGlhbDxSYXZlT3B0aW9ucz4pOiBib29sZWFuIHtcbiAgICBjb25zdCBvcHRpb25zSW52YWxpZCA9IHRoaXMucmF2ZVNlcnZpY2UuaXNJbnZhbGlkT3B0aW9ucyhvYmplY3QpO1xuICAgIGlmIChvcHRpb25zSW52YWxpZCkge1xuICAgICAgY29uc29sZS5lcnJvcihvcHRpb25zSW52YWxpZCk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zSW52YWxpZCAhPT0gJyc7XG4gIH1cblxuICBpbnNlcnRSYXZlT3B0aW9ucyhvYmplY3Q6IFBhcnRpYWw8UmF2ZU9wdGlvbnM+KSB7XG4gICAgdGhpcy5fcmF2ZU9wdGlvbnMgPSB0aGlzLnJhdmVTZXJ2aWNlLmNyZWF0ZVJhdmVPcHRpb25zT2JqZWN0KG9iamVjdCk7XG4gICAgaWYgKHRoaXMub25jbG9zZSkgeyB0aGlzLl9yYXZlT3B0aW9ucy5vbmNsb3NlID0gKCkgPT4gdGhpcy5vbmNsb3NlLmVtaXQoKTsgfVxuICAgIHRoaXMuX3JhdmVPcHRpb25zLmNhbGxiYWNrID0gKHJlcykgPT4ge1xuICAgICAgdGhpcy5vbmNsb3NlLmVtaXQocmVzKTtcbiAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICB0aGlzLnBheW1lbnRTZXR1cC5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxufVxuIl19