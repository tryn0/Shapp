/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function RaveOptions() { }
if (false) {
    /**
     * Your merchant public key provided when you create a button
     * @type {?|undefined}
     */
    RaveOptions.prototype.PBFPubKey;
    /**
     * Email of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_email;
    /**
     * Firstname of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_firstname;
    /**
     * firstname of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_lastname;
    /**
     * Text to be displayed as a short modal description
     * @type {?|undefined}
     */
    RaveOptions.prototype.custom_description;
    /**
     * Link to your custom image
     * @type {?|undefined}
     */
    RaveOptions.prototype.custom_logo;
    /**
     * Text to be displayed as the title of the payment modal
     * @type {?|undefined}
     */
    RaveOptions.prototype.custom_title;
    /**
     * Amount to charge
     * @type {?}
     */
    RaveOptions.prototype.amount;
    /**
     * phone number of the customer
     * @type {?|undefined}
     */
    RaveOptions.prototype.customer_phone;
    /**
     * URL to redirect to when transaction is completed.
     * @type {?|undefined}
     */
    RaveOptions.prototype.redirect_url;
    /**
     * route country. Default NG
     * @type {?|undefined}
     */
    RaveOptions.prototype.country;
    /**
     * currency to charge the card in. Default "NGN"
     * @type {?}
     */
    RaveOptions.prototype.currency;
    /**
     * This allows you select the payment option you want for your users, possible values are card, account or both
     * @type {?|undefined}
     */
    RaveOptions.prototype.payment_method;
    /**
     * Text to be displayed on the Rave Checkout Button
     * @type {?|undefined}
     */
    RaveOptions.prototype.pay_button_text;
    /**
     * Unique transaction reference provided by the merchant
     * @type {?}
     */
    RaveOptions.prototype.txref;
    /**
     * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway
     * @type {?|undefined}
     */
    RaveOptions.prototype.integrity_hash;
    /**
     * The value to be passed for this is 1. This is useful when customer is using an opera browser, it
     * would load the payment modal on a new page.
     * @type {?|undefined}
     */
    RaveOptions.prototype.hosted_payment;
    /**
     * Any other custom data you wish to pass.
     * @type {?|undefined}
     */
    RaveOptions.prototype.meta;
    /**
     * Subaccounts to split payment with
     * https://developer.flutterwave.com/v2.0/docs/split-payment
     * @type {?|undefined}
     */
    RaveOptions.prototype.subaccount;
}
/**
 * @record
 */
export function PrivateRaveOptions() { }
if (false) {
    /**
     * A function to be called on successful card charge. Userâ€™s can always be redirected to a successful or
     * failed page supplied by the merchant here based on response
     * \@param response?: The server response
     * @type {?}
     */
    PrivateRaveOptions.prototype.callback;
    /**
     * A function to be called when the pay modal is closed.
     * @type {?}
     */
    PrivateRaveOptions.prototype.onclose;
    /**
     * A function to be called when payment is about to begin
     * @type {?}
     */
    PrivateRaveOptions.prototype.init;
}
var PaymentSetup = /** @class */ (function () {
    function PaymentSetup() {
    }
    return PaymentSetup;
}());
export { PaymentSetup };
if (false) {
    /** @type {?} */
    PaymentSetup.prototype.close;
}
/**
 * @record
 */
export function RaveRootOptions() { }
if (false) {
    /**
     * Your rave public key. You should use your test key for test mode and live key for live mode.
     * @type {?|undefined}
     */
    RaveRootOptions.prototype.key;
    /**
     * Used to determing what script to load. Set to false when using a test public key.
     * Default: `false`
     * @type {?|undefined}
     */
    RaveRootOptions.prototype.isTest;
}
/**
 * @record
 */
export function PaymentInstance() { }
if (false) {
    /**
     * Close the payment modal after payment has finished
     * @type {?}
     */
    PaymentInstance.prototype.close;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF2ZS1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1yYXZlLyIsInNvdXJjZXMiOlsibGliL3JhdmUtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsaUNBK0VDOzs7Ozs7SUEzRUMsZ0NBQW1COzs7OztJQUluQixxQ0FBd0I7Ozs7O0lBSXhCLHlDQUE0Qjs7Ozs7SUFJNUIsd0NBQTJCOzs7OztJQUkzQix5Q0FBNEI7Ozs7O0lBSTVCLGtDQUFxQjs7Ozs7SUFJckIsbUNBQXNCOzs7OztJQUl0Qiw2QkFBZTs7Ozs7SUFJZixxQ0FBd0I7Ozs7O0lBSXhCLG1DQUFzQjs7Ozs7SUFJdEIsOEJBQWlCOzs7OztJQUlqQiwrQkFBaUI7Ozs7O0lBSWpCLHFDQUF3Qjs7Ozs7SUFJeEIsc0NBQXlCOzs7OztJQUl6Qiw0QkFBYzs7Ozs7SUFJZCxxQ0FBd0I7Ozs7OztJQUt4QixxQ0FBbUI7Ozs7O0lBSW5CLDJCQUFXOzs7Ozs7SUFLWCxpQ0FBK0Q7Ozs7O0FBR2pFLHdDQWVDOzs7Ozs7OztJQVRDLHNDQUFtQzs7Ozs7SUFJbkMscUNBQW9COzs7OztJQUlwQixrQ0FBaUI7O0FBR25CO0lBQUE7SUFFQSxDQUFDO0lBQUQsbUJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQzs7OztJQURDLDZCQUFrQjs7Ozs7QUFHcEIscUNBVUM7Ozs7OztJQU5DLDhCQUFjOzs7Ozs7SUFLZCxpQ0FBa0I7Ozs7O0FBSXBCLHFDQUtDOzs7Ozs7SUFEQyxnQ0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFJhdmVPcHRpb25zIHtcbiAgLyoqXG4gICAqIFlvdXIgbWVyY2hhbnQgcHVibGljIGtleSBwcm92aWRlZCB3aGVuIHlvdSBjcmVhdGUgYSBidXR0b25cbiAgICovXG4gIFBCRlB1YktleT86IHN0cmluZztcbiAgLyoqXG4gICAqIEVtYWlsIG9mIHRoZSBjdXN0b21lclxuICAgKi9cbiAgY3VzdG9tZXJfZW1haWw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBGaXJzdG5hbWUgb2YgdGhlIGN1c3RvbWVyXG4gICAqL1xuICBjdXN0b21lcl9maXJzdG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBmaXJzdG5hbWUgb2YgdGhlIGN1c3RvbWVyXG4gICAqL1xuICBjdXN0b21lcl9sYXN0bmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRleHQgdG8gYmUgZGlzcGxheWVkIGFzIGEgc2hvcnQgbW9kYWwgZGVzY3JpcHRpb25cbiAgICovXG4gIGN1c3RvbV9kZXNjcmlwdGlvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIExpbmsgdG8geW91ciBjdXN0b20gaW1hZ2VcbiAgICovXG4gIGN1c3RvbV9sb2dvPzogc3RyaW5nO1xuICAvKipcbiAgICogVGV4dCB0byBiZSBkaXNwbGF5ZWQgYXMgdGhlIHRpdGxlIG9mIHRoZSBwYXltZW50IG1vZGFsXG4gICAqL1xuICBjdXN0b21fdGl0bGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBbW91bnQgdG8gY2hhcmdlXG4gICAqL1xuICBhbW91bnQ6IG51bWJlcjtcbiAgLyoqXG4gICAqIHBob25lIG51bWJlciBvZiB0aGUgY3VzdG9tZXJcbiAgICovXG4gIGN1c3RvbWVyX3Bob25lPzogc3RyaW5nO1xuICAvKipcbiAgICogVVJMIHRvIHJlZGlyZWN0IHRvIHdoZW4gdHJhbnNhY3Rpb24gaXMgY29tcGxldGVkLlxuICAgKi9cbiAgcmVkaXJlY3RfdXJsPzogc3RyaW5nO1xuICAvKipcbiAgICogcm91dGUgY291bnRyeS4gRGVmYXVsdCBOR1xuICAgKi9cbiAgY291bnRyeT86IHN0cmluZztcbiAgLyoqXG4gICAqIGN1cnJlbmN5IHRvIGNoYXJnZSB0aGUgY2FyZCBpbi4gRGVmYXVsdCBcIk5HTlwiXG4gICAqL1xuICBjdXJyZW5jeTogc3RyaW5nO1xuICAvKipcbiAgICogVGhpcyBhbGxvd3MgeW91IHNlbGVjdCB0aGUgcGF5bWVudCBvcHRpb24geW91IHdhbnQgZm9yIHlvdXIgdXNlcnMsIHBvc3NpYmxlIHZhbHVlcyBhcmUgY2FyZCwgYWNjb3VudCBvciBib3RoXG4gICAqL1xuICBwYXltZW50X21ldGhvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRleHQgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBSYXZlIENoZWNrb3V0IEJ1dHRvblxuICAgKi9cbiAgcGF5X2J1dHRvbl90ZXh0Pzogc3RyaW5nO1xuICAvKipcbiAgICogVW5pcXVlIHRyYW5zYWN0aW9uIHJlZmVyZW5jZSBwcm92aWRlZCBieSB0aGUgbWVyY2hhbnRcbiAgICovXG4gIHR4cmVmOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgc2hhMjU2IGhhc2ggb2YgeW91ciBnZXRwYWlkU2V0dXAgdmFsdWVzLCBpdCBpcyB1c2VkIGZvciBwYXNzaW5nIHNlY3VyZWQgdmFsdWVzIHRvIHRoZSBwYXltZW50IGdhdGV3YXlcbiAgICovXG4gIGludGVncml0eV9oYXNoPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHZhbHVlIHRvIGJlIHBhc3NlZCBmb3IgdGhpcyBpcyAxLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGN1c3RvbWVyIGlzIHVzaW5nIGFuIG9wZXJhIGJyb3dzZXIsIGl0XG4gICAqIHdvdWxkIGxvYWQgdGhlIHBheW1lbnQgbW9kYWwgb24gYSBuZXcgcGFnZS5cbiAgICovXG4gIGhvc3RlZF9wYXltZW50PzogMTtcbiAgLyoqXG4gICAqIEFueSBvdGhlciBjdXN0b20gZGF0YSB5b3Ugd2lzaCB0byBwYXNzLlxuICAgKi9cbiAgbWV0YT86IGFueTtcbiAgLyoqXG4gICAqIFN1YmFjY291bnRzIHRvIHNwbGl0IHBheW1lbnQgd2l0aFxuICAgKiBodHRwczovL2RldmVsb3Blci5mbHV0dGVyd2F2ZS5jb20vdjIuMC9kb2NzL3NwbGl0LXBheW1lbnRcbiAgICovXG4gIHN1YmFjY291bnQ/OiB7IGlkOiBzdHJpbmcsIHRyYW5zYWN0aW9uX3NwbGl0X3JhdGlvOiBzdHJpbmcgfVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByaXZhdGVSYXZlT3B0aW9ucyBleHRlbmRzIFJhdmVPcHRpb25zIHtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3NmdWwgY2FyZCBjaGFyZ2UuIFVzZXLigJlzIGNhbiBhbHdheXMgYmUgcmVkaXJlY3RlZCB0byBhIHN1Y2Nlc3NmdWwgb3JcbiAgICogZmFpbGVkIHBhZ2Ugc3VwcGxpZWQgYnkgdGhlIG1lcmNoYW50IGhlcmUgYmFzZWQgb24gcmVzcG9uc2VcbiAgICogQHBhcmFtIHJlc3BvbnNlPzogVGhlIHNlcnZlciByZXNwb25zZVxuICAgKi9cbiAgY2FsbGJhY2s6IChyZXNwb25zZT86IGFueSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBheSBtb2RhbCBpcyBjbG9zZWQuXG4gICAqL1xuICBvbmNsb3NlOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBwYXltZW50IGlzIGFib3V0IHRvIGJlZ2luXG4gICAqL1xuICBpbml0OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgUGF5bWVudFNldHVwIHtcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmF2ZVJvb3RPcHRpb25zIHtcbiAgLyoqXG4gICAqIFlvdXIgcmF2ZSBwdWJsaWMga2V5LiBZb3Ugc2hvdWxkIHVzZSB5b3VyIHRlc3Qga2V5IGZvciB0ZXN0IG1vZGUgYW5kIGxpdmUga2V5IGZvciBsaXZlIG1vZGUuXG4gICAqL1xuICBrZXkgPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCB0byBkZXRlcm1pbmcgd2hhdCBzY3JpcHQgdG8gbG9hZC4gU2V0IHRvIGZhbHNlIHdoZW4gdXNpbmcgYSB0ZXN0IHB1YmxpYyBrZXkuXG4gICAqIERlZmF1bHQ6IGBmYWxzZWBcbiAgICovXG4gIGlzVGVzdCA/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudEluc3RhbmNlIHtcbiAgLyoqXG4gICAqIENsb3NlIHRoZSBwYXltZW50IG1vZGFsIGFmdGVyIHBheW1lbnQgaGFzIGZpbmlzaGVkXG4gICAqL1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbn1cbiJdfQ==